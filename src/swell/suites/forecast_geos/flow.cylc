# (C) Copyright 2021- United States Government as represented by the Administrator of the
# National Aeronautics and Space Administration. All Rights Reserved.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.

# --------------------------------------------------------------------------------------------------

# Cylc suite for Geos forecast without DA

# --------------------------------------------------------------------------------------------------

[scheduler]
    UTC mode = True
    allow implicit tasks = False

# --------------------------------------------------------------------------------------------------

[scheduling]

    initial cycle point = {{start_cycle_point}}
    final cycle point = {{final_cycle_point}}

    [[graph]]
        R1 = """
            # Triggers for non cycle time dependent tasks
            # -------------------------------------------
            # Clone Geos source code
            CloneGeos

            # Build Geos source code by linking
            CloneGeos => BuildGeosByLinking?

            # If not able to link to build create the build
            BuildGeosByLinking:fail? => BuildGeos

            # Need first set of restarts to run model
            GetGeosRestart => PrepGeosRunDir

            # Get first set of restarts
            BuildGeosByLinking? | BuildGeos  => RunGeosExecutable
        """

        {% for cycle_time in cycle_times %}
        {{cycle_time}} = """

            # Run Geos Executable
            PrepGeosRunDir => RunGeosExecutable
            MoveForecastRestart[-PT6H] => PrepGeosRunDir

            # Move restart to next cycle
            RunGeosExecutable => MoveForecastRestart

            # Save restarts if requested
            # MoveForecastRestart[-PT6H] => SaveRestart

            # Remove Run Directory
            MoveForecastRestart => RemoveForecastDir
        """
        {% endfor %}

# --------------------------------------------------------------------------------------------------

[runtime]

    # Task defaults
    # -------------
    [[root]]
        pre-script = "source $CYLC_SUITE_DEF_PATH/modules"

        [[[environment]]]
            datetime = $CYLC_TASK_CYCLE_POINT
            config   = $CYLC_SUITE_DEF_PATH/experiment.yaml

    # Tasks
    # -----
    [[CloneGeos]]
        script = "swell task CloneGeos $config"

    [[BuildGeosByLinking]]
        script = "swell task BuildGeosByLinking $config"

    [[BuildGeos]]
        script = "swell task BuildGeos $config"
        platform = {{platform}}
        execution time limit = {{scheduling["BuildGeos"]["execution_time_limit"]}}
        [[[directives]]]
            --account = {{scheduling["BuildGeos"]["account"]}}
            --qos = {{scheduling["BuildGeos"]["qos"]}}
            --job-name = BuildGeos
            --nodes={{scheduling["BuildGeos"]["nodes"]}}
            --ntasks-per-node={{scheduling["BuildGeos"]["ntasks_per_node"]}}
            {% if scheduling["BuildGeos"]["partition"] %}
            --partition={{scheduling["BuildGeos"]["partition"]}}
            {% endif %}

    [[PrepGeosRunDir]]
        script = "swell task PrepGeosRunDir $config -d $datetime"

    [[RemoveForecastDir]]
        script = "swell task RemoveForecastDir $config -d $datetime"

    [[GetGeosRestart]]
        script = "swell task GetGeosRestart $config -d $datetime"

    [[MoveForecastRestart]]
        script = "swell task MoveForecastRestart $config -d $datetime"

    [[SaveRestart]]
        script = "swell task SaveRestart $config -d $datetime"

    [[RunGeosExecutable]]
        script = "swell task RunGeosExecutable $config -d $datetime"
        platform = {{platform}}
        execution time limit = {{scheduling["RunGeosExecutable"]["execution_time_limit"]}}
        [[[directives]]]
            --account = {{scheduling["RunGeosExecutable"]["account"]}}
            --qos = {{scheduling["RunGeosExecutable"]["qos"]}}
            --job-name = RunGeosExecutable
            --nodes={{scheduling["RunGeosExecutable"]["nodes"]}}
            --ntasks-per-node={{scheduling["RunGeosExecutable"]["ntasks_per_node"]}}
            {% if scheduling["RunGeosExecutable"]["partition"] %}
            --partition={{scheduling["RunGeosExecutable"]["partition"]}}
            {% endif %}

# --------------------------------------------------------------------------------------------------
