datasets:

- name: experiment
  type: IodaObsSpace
  filenames:
    - {{obs_path_file}}
  groups:
    - name: ObsValue
      variables: &variables {{simulated_variables}}
    - name: hofx
    - name: EffectiveQC
    - name: MetaData

transforms:

# Generate omb for JEDI
- transform: arithmetic
  new name: experiment::ObsValueMinusHofx::${variable}
  equals: experiment::ObsValue::${variable}-experiment::hofx::${variable}
  for:
    variable: *variables

# Generate hofx that passed QC for JEDI
- transform: accept where
  new name: experiment::hofxPassedQc::${variable}
  starting field: experiment::hofx::${variable}
  where:
    - experiment::EffectiveQC::${variable} == 0
  for:
    variable: *variables

# Generate omb that passed QC for JEDI
- transform: accept where
  new name: experiment::ObsValueMinushofxPassedQc::${variable}
  starting field: experiment::ObsValueMinusHofx::${variable}
  where:
    - experiment::EffectiveQC::${variable} == 0
  for:
    variable: *variables

graphics:

  plotting_backend: Emcpy
  figure_list:

  # Correlation scatter plots
  # -------------------------

  # JEDI h(x) vs Observations
  - batch figure:
      variables: *variables
    figure:
      layout: [1,1]
      title: 'Observations vs. JEDI h(x) | {{instrument_title}} | ${variable_title}'
      output name: '{{cycle_dir}}/eva/{{instrument}}/correlation_scatter/${variable}/jedi_hofx_vs_obs_{{instrument}}_${variable}.png'
    plots:
      - add_xlabel: 'Observation Value'
        add_ylabel: 'JEDI h(x)'
        add_grid:
        add_legend:
          loc: 'upper left'
        layers:
        - type: Scatter
          x:
            variable: experiment::ObsValue::${variable}
          y:
            variable: experiment::hofx::${variable}
          markersize: 5
          color: 'black'
          label: 'JEDI h(x) versus obs (all obs)'
        - type: Scatter
          x:
            variable: experiment::ObsValue::${variable}
          y:
            variable: experiment::hofxPassedQc::${variable}
          markersize: 5
          color: 'red'
          label: 'JEDI h(x) versus obs (passed QC in JEDI)'# Map plots# ---------

  # Observations
  - batch figure:
      variables: *variables
    dynamic options:
      - type: vminvmaxcmap
        data variable: experiment::ObsValue::${variable}
    figure:
      figure size: [20,10]
      layout: [1,1]
      title: 'Observations | {{instrument_title}} | Obs Value'
      output name: '{{cycle_dir}}/eva/{{instrument}}/map_plots/${variable}/observations_{{instrument}}_${variable}.png'
    plots:
      - mapping:
          projection: plcarr
          domain: global
        add_map_features: ['coastline']
        add_colorbar:
          label: ObsValue
        add_grid:
        layers:
        - type: MapScatter
          longitude:
            variable: experiment::MetaData::longitude
          latitude:
            variable: experiment::MetaData::latitude
          data:
            variable: experiment::ObsValue::${variable}
          markersize: 2
          label: ObsValue
          colorbar: true
          cmap: ${dynamic_cmap}
          vmin: ${dynamic_vmin}
          vmax: ${dynamic_vmax}

  # omb jedi
  - batch figure:
      variables: *variables
    dynamic options:
      - type: vminvmaxcmap
        data variable: experiment::ObsValueMinusHofx::${variable}
    figure:
      figure size: [20,10]
      layout: [1,1]
      title: 'JEDI OmB | {{instrument_title}} | ${variable_title}'
      output name: '{{cycle_dir}}/eva/{{instrument}}/map_plots/${variable}/omb_jedi_{{instrument}}_${variable}.png'
    plots:
      - mapping:
          projection: plcarr
          domain: global
        add_map_features: ['coastline']
        add_colorbar:
          label: '${variable}'
        add_grid:
        layers:
        - type: MapScatter
          longitude:
            variable: experiment::MetaData::longitude
          latitude:
            variable: experiment::MetaData::latitude
          data:
            variable: experiment::ObsValueMinusHofx::${variable}
          markersize: 2
          label: '${variable}'
          colorbar: true
          cmap: ${dynamic_cmap}
          vmin: ${dynamic_vmin}
          vmax: ${dynamic_vmax}
