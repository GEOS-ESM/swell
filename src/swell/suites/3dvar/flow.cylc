# (C) Copyright 2021- United States Government as represented by the Administrator of the
# National Aeronautics and Space Administration. All Rights Reserved.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.

# --------------------------------------------------------------------------------------------------

# Cylc suite for executing JEDI-based non-cycling variational data assimilation

# --------------------------------------------------------------------------------------------------

[scheduler]
    UTC mode = True
    allow implicit tasks = False

# --------------------------------------------------------------------------------------------------

[scheduling]

    initial cycle point = {{start_cycle_point}}
    final cycle point = {{final_cycle_point}}
    runahead limit = {{runahead_limit}}

    [[graph]]
        R1 = """
            # Triggers for non cycle time dependent tasks
            # -------------------------------------------
            # Clone JEDI source code
            CloneJedi

            # Build JEDI source code by linking
            CloneJedi => BuildJediByLinking?

            # If not able to link to build create the build
            BuildJediByLinking:fail? => BuildJedi

            {% for model_component in model_components %}
            # Stage JEDI static files
            CloneJedi => StageJedi-{{model_component}}
            {% endfor %}
        """

        {% for cycle_time in cycle_times %}
        {{cycle_time.cycle_time}} = """
        {% for model_component in model_components %}
        {% if cycle_time[model_component] %}
            # Task triggers for: {{model_component}}
            # ------------------
            # Get background
            GetBackground-{{model_component}}

            # Get observations
            GetObservations-{{model_component}}

            # GenerateBClimatology, for ocean it is cycle dependent
            GenerateBClimatologyByLinking-{{model_component}} :fail? => GenerateBClimatology-{{model_component}}
            GetBackground-{{model_component}} => GenerateBClimatology-{{model_component}}

            # Perform staging that is cycle dependent
            StageJediCycle-{{model_component}}

            # Run Jedi variational executable
            BuildJediByLinking[^]? | BuildJedi[^]  => RunJediVariationalExecutable-{{model_component}}
            StageJedi-{{model_component}}[^] => RunJediVariationalExecutable-{{model_component}}
            StageJediCycle-{{model_component}} => RunJediVariationalExecutable-{{model_component}}
            GetBackground-{{model_component}} => RunJediVariationalExecutable-{{model_component}}
            GenerateBClimatologyByLinking-{{model_component}}? | GenerateBClimatology-{{model_component}} => RunJediVariationalExecutable-{{model_component}}
            GetObservations-{{model_component}} => RunJediVariationalExecutable-{{model_component}}

            # EvaObservations
            RunJediVariationalExecutable-{{model_component}} => EvaObservations-{{model_component}}

            # EvaJediLog
            RunJediVariationalExecutable-{{model_component}} => EvaJediLog-{{model_component}}

            # EvaIncrement
            RunJediVariationalExecutable-{{model_component}} => EvaIncrement-{{model_component}}

            # Save observations
            RunJediVariationalExecutable-{{model_component}} => SaveObsDiags-{{model_component}}

            # Clean up large files
            EvaObservations-{{model_component}} & SaveObsDiags-{{model_component}} =>
            CleanCycle-{{model_component}}

        {% endif %}
        {% endfor %}
        """
        {% endfor %}

# --------------------------------------------------------------------------------------------------

[runtime]

    # Task defaults
    # -------------
    [[root]]
        pre-script = "source $CYLC_SUITE_DEF_PATH/modules"

        [[[environment]]]
            datetime = $CYLC_TASK_CYCLE_POINT
            config   = $CYLC_SUITE_DEF_PATH/experiment.yaml

    # Tasks
    # -----
    [[CloneJedi]]
        script = "swell task CloneJedi $config"

    [[BuildJediByLinking]]
        script = "swell task BuildJediByLinking $config"

    [[BuildJedi]]
        script = "swell task BuildJedi $config"
        platform = {{platform}}
        execution time limit = {{scheduling["BuildJedi"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["BuildJedi"]["directives"]["all"].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    {% for model_component in model_components %}
    [[StageJedi-{{model_component}}]]
        script = "swell task StageJedi $config -m {{model_component}}"

    [[StageJediCycle-{{model_component}}]]
        script = "swell task StageJedi $config -d $datetime -m {{model_component}}"

    [[ GetBackground-{{model_component}} ]]
        script = "swell task GetBackground $config -d $datetime -m {{model_component}}"

    [[GetObservations-{{model_component}}]]
        script = "swell task GetObservations $config -d $datetime -m {{model_component}}"

    [[GenerateBClimatologyByLinking-{{model_component}}]]
        script = "swell task GenerateBClimatologyByLinking $config -d $datetime -m {{model_component}}"

    [[GenerateBClimatology-{{model_component}}]]
        script = "swell task GenerateBClimatology $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["GenerateBClimatology"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["GenerateBClimatology"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[RunJediVariationalExecutable-{{model_component}}]]
        script = "swell task RunJediVariationalExecutable $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["RunJediVariationalExecutable"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["RunJediVariationalExecutable"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[EvaJediLog-{{model_component}}]]
        script = "swell task EvaJediLog $config -d $datetime -m {{model_component}}"

    [[EvaIncrement-{{model_component}}]]
        script = "swell task EvaIncrement $config -d $datetime -m {{model_component}}"

    [[EvaObservations-{{model_component}}]]
        script = "swell task EvaObservations $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["EvaObservations"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["EvaObservations"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[SaveObsDiags-{{model_component}}]]
        script = "swell task SaveObsDiags $config -d $datetime -m {{model_component}}"

    [[CleanCycle-{{model_component}}]]
        script = "swell task CleanCycle $config -d $datetime -m {{model_component}}"
    {% endfor %}

# --------------------------------------------------------------------------------------------------
