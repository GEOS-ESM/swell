# (C) Copyright 2021- United States Government as represented by the Administrator of the
# National Aeronautics and Space Administration. All Rights Reserved.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.

# --------------------------------------------------------------------------------------------------

# Cylc suite for executing JEDI-based LETKF Algorithm

# --------------------------------------------------------------------------------------------------

[scheduler]
    UTC mode = True
    allow implicit tasks = False

# --------------------------------------------------------------------------------------------------

[scheduling]

    initial cycle point = {{start_cycle_point}}
    final cycle point = {{final_cycle_point}}
    runahead limit = {{runahead_limit}}

    [[graph]]
        R1 = """
            # Triggers for non cycle time dependent tasks
            # -------------------------------------------
            # Clone JEDI source code
            CloneJedi

            # Build JEDI source code by linking
            CloneJedi => BuildJediByLinking?

            # If not able to link to build create the build
            BuildJediByLinking:fail? => BuildJedi

            {% for model_component in model_components %}
            # Stage JEDI static files
            CloneJedi => StageJedi-{{model_component}}
            {% endfor %}
        """

        {% for cycle_time in cycle_times %}
        {{cycle_time.cycle_time}} = """
        {% for model_component in model_components %}
        {% if cycle_time[model_component] %}
            # Task triggers for: {{model_component}}
            # ------------------
            # Get ensemble
            GetEnsemble-{{model_component}}

            # Get observations
            GetObservations-{{model_component}}

            # Perform staging that is cycle dependent
            StageJediCycle-{{model_component}}

            # Run Jedi hofx executable
            BuildJediByLinking[^]? | BuildJedi[^]  => RunJediLocalEnsembleDaExecutable-{{model_component}}
            StageJedi-{{model_component}}[^] => RunJediLocalEnsembleDaExecutable-{{model_component}}
            StageJediCycle-{{model_component}} => RunJediLocalEnsembleDaExecutable-{{model_component}}
            GetEnsemble-{{model_component}} => RunJediLocalEnsembleDaExecutable-{{model_component}}
            GetObservations-{{model_component}} => RunJediLocalEnsembleDaExecutable-{{model_component}}

            # EvaObservations
            RunJediLocalEnsembleDaExecutable-{{model_component}} => EvaObservations-{{model_component}}

            # Save observations
            RunJediLocalEnsembleDaExecutable-{{model_component}} => SaveObsDiags-{{model_component}}

            # Clean up large files
            EvaObservations-{{model_component}} & SaveObsDiags-{{model_component}} =>
            CleanCycle-{{model_component}}

        {% endif %}
        {% endfor %}
        """
        {% endfor %}

# --------------------------------------------------------------------------------------------------

[runtime]

    # Task defaults
    # -------------
    [[root]]
        pre-script = "source $CYLC_SUITE_DEF_PATH/modules"

        [[[environment]]]
            datetime = $CYLC_TASK_CYCLE_POINT
            config   = $CYLC_SUITE_DEF_PATH/experiment.yaml

    # Tasks
    # -----
    [[CloneJedi]]
        script = "swell_task CloneJedi $config"

    [[BuildJediByLinking]]
        script = "swell_task BuildJediByLinking $config"

    [[BuildJedi]]
        script = "swell_task BuildJedi $config"
        platform = {{platform}}
        execution time limit = {{scheduling["BuildJedi"]["execution_time_limit"]}}
        [[[directives]]]
            --account = {{scheduling["BuildJedi"]["account"]}}
            --qos = {{scheduling["BuildJedi"]["qos"]}}
            --job-name = BuildJedi
            --nodes={{scheduling["BuildJedi"]["nodes"]}}
            --ntasks-per-node={{scheduling["BuildJedi"]["ntasks_per_node"]}}
            --constraint={{scheduling["BuildJedi"]["constraint"]}}
            {% if scheduling["BuildJedi"]["partition"] %}
            --partition={{scheduling["BuildJedi"]["partition"]}}
            {% endif %}

    {% for model_component in model_components %}
    [[StageJedi-{{model_component}}]]
        script = "swell_task StageJedi $config -m {{model_component}}"

    [[StageJediCycle-{{model_component}}]]
        script = "swell_task StageJedi $config -d $datetime -m {{model_component}}"

    [[ GetEnsemble-{{model_component}} ]]
        script = "swell_task GetEnsemble $config -d $datetime -m {{model_component}}"

    [[GetObservations-{{model_component}}]]
        script = "swell_task GetObservations $config -d $datetime -m {{model_component}}"

    [[RunJediLocalEnsembleDaExecutable-{{model_component}}]]
        script = "swell_task RunJediLocalEnsembleDaExecutable $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["RunJediLocalEnsembleDaExecutable"]["execution_time_limit"]}}
        [[[directives]]]
            --account = {{scheduling["RunJediLocalEnsembleDaExecutable"]["account"]}}
            --qos = {{scheduling["RunJediLocalEnsembleDaExecutable"]["qos"]}}
            --job-name = RunJediLocalEnsembleDaExecutable
            --nodes={{scheduling["RunJediLocalEnsembleDaExecutable"]["nodes"]}}
            --ntasks-per-node={{scheduling["RunJediLocalEnsembleDaExecutable"]["ntasks_per_node"]}}
            --constraint={{scheduling["RunJediLocalEnsembleDaExecutable"]["constraint"]}}
            {% if scheduling["RunJediLocalEnsembleDaExecutable"]["partition"] %}
            --partition={{scheduling["RunJediLocalEnsembleDaExecutable"]["partition"]}}
            {% endif %}

    [[EvaObservations-{{model_component}}]]
        script = "swell_task EvaObservations $config -d $datetime -m {{model_component}}"

    [[SaveObsDiags-{{model_component}}]]
        script = "swell_task SaveObsDiags $config -d $datetime -m {{model_component}}"

    [[CleanCycle-{{model_component}}]]
        script = "swell_task CleanCycle $config -d $datetime -m {{model_component}}"
    {% endfor %}

# --------------------------------------------------------------------------------------------------
