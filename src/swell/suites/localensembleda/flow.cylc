# (C) Copyright 2021- United States Government as represented by the Administrator of the
# National Aeronautics and Space Administration. All Rights Reserved.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.

# --------------------------------------------------------------------------------------------------

# Cylc suite for executing JEDI-based LocalEnsembleDA Algorithm

# --------------------------------------------------------------------------------------------------

[scheduler]
    UTC mode = True
    allow implicit tasks = False

# --------------------------------------------------------------------------------------------------

[scheduling]

    initial cycle point = {{start_cycle_point}}
    final cycle point = {{final_cycle_point}}
    runahead limit = {{runahead_limit}}

    [[graph]]
        R1 = """
            # Triggers for non cycle time dependent tasks
            # -------------------------------------------
            # Clone JEDI source code
            CloneJedi

            # Build JEDI source code by linking
            CloneJedi => BuildJediByLinking?

            # If not able to link to build create the build
            BuildJediByLinking:fail? => BuildJedi
        """

        {% for cycle_time in cycle_times %}
        {{cycle_time.cycle_time}} = """
        {% for model_component in model_components %}
        {% if cycle_time[model_component] %}
            # Task triggers for: {{model_component}}
            # ------------------
            # Perform staging that is cycle dependent
            CloneJedi[^] => StageJediCycle-{{model_component}}

            # Get ensemble
            GetEnsemble-{{model_component}}

            # Get observations
            GetObservations-{{model_component}}

            # Run hofx for ensemble members according to strategy
            {% if ensemble_hofx_strategy == 'serial' %}
                BuildJediByLinking[^]? | BuildJedi[^] => RunJediHofxEnsembleExecutable-{{model_component}}
                StageJediCycle-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}
                GetEnsemble-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}
                GetObservations-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}
                GetBackground-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}
            {% elif ensemble_hofx_strategy == 'parallel' %}
            {% for packet in range(ensemble_hofx_packets) %}
                # When strategy is parallel, only proceed if all RunJediHofxEnsembleExecutable completes successfully for each packet
                BuildJediByLinking[^]? | BuildJedi[^] => RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}
                StageJediCycle-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}
                GetEnsemble-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}
                GetObservations-{{model_component}} => RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}
                GetBackground-{{model_component}} => GetEnsembleMeanVariance => RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}

                # There is a need for a task to combine all hofx observations together, compute node preferred, put here as placeholder
                # RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}} => RunEnsembleHofxCombiner-{{model_component}}
                RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}} =>RunJediLocalEnsembleDaExecutable-{{model_component}}
            {% endfor %}
            {% endif %}

        # LETKF solver can be executed only after all the hofx ensemble members have been combined
        # RunEnsembleHofxCombiner-{{model_component}} => RunJediLocalEnsembleDaExecutable-{{model_component}}

        # Run Jedi DA executable
	    {% if ensemble_hofx_strategy == 'serial' %}
	    RunJediHofxEnsembleExecutable-{{model_component}} => RunJediLocalEnsembleDaExecutable-{{model_component}}
	    {% endif %}

            # EvaObservations
            RunJediLocalEnsembleDaExecutable-{{model_component}} => EvaObservations-{{model_component}}

            # Save observations
            RunJediLocalEnsembleDaExecutable-{{model_component}} => SaveObsDiags-{{model_component}}

            # Clean up large files
            EvaObservations-{{model_component}} & SaveObsDiags-{{model_component}} =>
            CleanCycle-{{model_component}}

        {% endif %}
        {% endfor %}
        """
        {% endfor %}

# --------------------------------------------------------------------------------------------------

[runtime]

    # Task defaults
    # -------------
    [[root]]
        pre-script = "source $CYLC_SUITE_DEF_PATH/modules"

        [[[environment]]]
            datetime = $CYLC_TASK_CYCLE_POINT
            config   = $CYLC_SUITE_DEF_PATH/experiment.yaml

    # Tasks
    # -----
    [[CloneJedi]]
        script = "swell task CloneJedi $config"

    [[BuildJediByLinking]]
        script = "swell task BuildJediByLinking $config"

    [[BuildJedi]]
        script = "swell task BuildJedi $config"
        platform = {{platform}}
        execution time limit = {{scheduling["BuildJedi"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["BuildJedi"]["directives"]["all"].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    {% for model_component in model_components %}

    [[StageJediCycle-{{model_component}}]]
        script = "swell task StageJedi $config -d $datetime -m {{model_component}}"

    [[ GetBackground-{{model_component}} ]]
        script = "swell task GetBackground $config -d $datetime -m {{model_component}}"

    [[GetEnsemble-{{model_component}}]]
        script = "swell task GetEnsemble $config -d $datetime -m {{model_component}}"

    [[GetEnsembleMeanVariance]]
        script = "swell task GetEnsembleMeanVariance $config -d $datetime -m {{model_component}}"
	platform = {{platform}}
	execution time limit = {{scheduling["GetEnsembleMeanVariance"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["GetEnsembleMeanVariance"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[GetObservations-{{model_component}}]]
        script = "swell task GetObservations $config -d $datetime -m {{model_component}}"

    {% if ensemble_hofx_strategy == 'serial' %}
    [[RunJediHofxEnsembleExecutable-{{model_component}}]]
        script = "swell task RunJediHofxEnsembleExecutable $config -d $datetime -m {{model_component}}"
	platform = {{platform}}
	execution time limit = {{scheduling["RunJediHofxEnsembleExecutable"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["RunJediHofxEnsembleExecutable"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}
    {% elif ensemble_hofx_strategy == 'parallel' %}
    {% for packet in range(ensemble_hofx_packets) %}
    [[RunJediHofxEnsembleExecutable-{{model_component}}_pack{{packet}}]]
	script = "swell task RunJediHofxEnsembleExecutable $config -d $datetime -m {{model_component}} -p {{packet}}"
	platform = {{platform}}
	execution time limit = {{scheduling["RunJediHofxEnsembleExecutable"]["execution_time_limit"]}}
        [[[directives]]]

    {% endfor %}
    {% endif %}

    [[RunJediLocalEnsembleDaExecutable-{{model_component}}]]
        script = "swell task RunJediLocalEnsembleDaExecutable $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["RunJediLocalEnsembleDaExecutable"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["RunJediLocalEnsembleDaExecutable"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[EvaObservations-{{model_component}}]]
        script = "swell task EvaObservations $config -d $datetime -m {{model_component}}"
        platform = {{platform}}
        execution time limit = {{scheduling["EvaObservations"]["execution_time_limit"]}}
        [[[directives]]]
        {%- for key, value in scheduling["EvaObservations"]["directives"][model_component].items() %}
            --{{key}} = {{value}}
        {%- endfor %}

    [[SaveObsDiags-{{model_component}}]]
        script = "swell task SaveObsDiags $config -d $datetime -m {{model_component}}"

    [[CleanCycle-{{model_component}}]]
        script = "swell task CleanCycle $config -d $datetime -m {{model_component}}"
    {% endfor %}

# --------------------------------------------------------------------------------------------------
